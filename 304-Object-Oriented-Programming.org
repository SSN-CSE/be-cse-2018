* <<<304>>> OBJECT ORIENTED PROGRAMMING
:properties:
:author: Dr. B. Prabavathy and Dr. B. Bharathi
:date: 
:end:

#+startup: showall

{{{credits}}}
| L | T | P | C |
| 3 | 0 | 0 | 3 |

** COURSE OBJECTIVES
- To learn the basics of Object Oriented Programming 
- To know the principles of inheritance and polymorphism
- To learn the concepts of generic methods and  generic collections

{{{unit}}}
|UNIT I |INTRODUCTION | 10 |
Principles of OOP: Classes - Objects - Data hiding - Data
encapsulation- Inheritance - Polymorphism; Definition of classes:
objects - methods - Access specifiers – Static and final classes and
members; Object construction and destruction – Fundamental programming
structures in Java; Streams: Input-Output; Examples in Java.

{{{unit}}}
|UNIT II | INHERITANCE 	 | 10 |
Inheritance: Definition - Types of inheritance: Single - multilevel -
multiple - hierarchical - hybrid; Subclass constructors – Interfaces
in Java: Definition, Implementation - Extending interfaces -
Inheritance versus delegation – Inheritance rules - inner classes;
Examples in Java

{{{unit}}}
|UNIT III |POLYMORPHISM AND EXCEPTION HANDLING	  | 7 |
Polymorphism: Method overloading and overriding - Dynamic method
dispatch; Exceptions: Hierarchy, Built-in exceptions, Creating own
exception; Packages in Java; Examples in Java

{{{unit}}}
|UNIT IV |GENERIC TYPES AND METHODS	 | 9 |
Definition and concepts: generic classes and generic methods – generic
types – Restrictions and limitations – Inheritance rules for generic
types – reflections; Examples in Java

{{{unit}}}
|UNIT V | GENERIC COLLECTIONS FOR ADTS AND ALGORITHMS	 | 9 |
Introduction to collections; Collection classes and interfaces: Array
list - Linked list - Queue - set - trees; Iterators for collections –
Map class – Algorithms: sorting - searching - user-defined algorithms
– Examples in Java

\hfill *Total Periods: 45*

** COURSE OUTCOMES
After the completion of this course, students will be able to: 
- Solve problems using classes and objects (K3)
- Develop programs using inheritance and interfaces (K3)
- Experiment the concepts of polymorphism (K3)
- Design applications using generic programming. (K3)
- Develop algorithms using generic collections(K3)
     
** TEXT BOOKS
1. Danny Poo, Derek Kiong, Swarnalatha Ashok, ``Object-Oriented
   Programming and Java'', 2nd Edition, Springer Publication, 2008.
2. Herbert Schildt, ``Java: The Complete Reference'', 8th Edition,
   McGraw Hill Education, 2011.


** REFERENCES
1. Timothy Budd, ``Understanding Object-oriented programming with
   Java'', Updated Edition, Pearson Education, 2000.
2. C. Thomas Wu, ``An introduction to Object-oriented programming with
   Java'', Fourth Edition, Tata McGraw-Hill Publishing company
   Ltd., 2006.
3. Cay S. Horstmann, Gary cornell, ``Core Java Volume –I
   Fundamentals'' 9th Edition, Prentice Hall, 2013.
4. Paul Deitel, Harvey Deitel, ``Java SE 8 for programmers'', 3rd
   Edition, Pearson, 2015.
5. Steven Holzner, ``Java 2 Black book'', Dreamtech press, 2011.



