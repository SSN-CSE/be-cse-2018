* <<<OE1>>> FUNDAMENTALS OF DATA STRUCTURES
:properties:
:author: 
:end:

#+startup: showall

{{{credits}}}
| L | T | P | C |
| 2 | 0 | 2 | 3 |

** COURSE OBJECTIVES
- To understand the concepts of ADT 
- To comprehend the notion of linear and non linear data structures
- To use a suitable data structure for the given problem and implement them in a high level programming language
- To understand the concepts of sorting and searching techniques

{{{unit}}}
|UNIT I | LIST | 6 |
Abstract Data Types (ADT) -- List ADT: Linked lists -- Doubly-linked lists -- Applications of lists:
Polynomial addition.

{{{unit}}}
|UNIT II | STACK AND QUEUE | 6 |
Stack ADT: Stack model - Array implementation of stack - Applications: Infix to postfix conversion - Evaluating postfix expressions - Queue ADT: Queue model - Array implementation of queues - Applications of queues.

{{{unit}}}
|UNIT III | TREES | 6 |
Tree ADT: Preliminaries -- Tree traversals -- Expression trees -- Binary search tree -- AVL Trees.

{{{unit}}}
|UNIT IV | GRAPHS | 6 |
Definitions -- Representation of graph -- Types of graph --
Breadth-first traversal -- Depth first traversal -- Shortest-path
algorithm: Dijkstra's algorithm. 

{{{unit}}}
|UNIT V | SORTING AND SEARCHING TECHNIQUES   | 6 |
Sorting: Insertion sort -- Selection sort -- Merge sort; Searching: Linear search -- Binary search.

\hfill *Theory Periods: 30*

** SUGGESTIVE EXPERIMENTS
- Represent polynomial as a linked list and perform polynomial addition
- Array implementation of stack ADT
- Convert infix expression to postfix and evaluate using Stack ADT
- Implement binary search tree. Produce its pre-order, in-order, and post-order traversals
- Represent graph using adjacency matrix and perform depth first traversal on the graph
- Implement Dijkstraâ€™s algorithm to find the shortest path using graph
- Implement insertion sort and merge sort
- Implement linear search and binary search


\hfill *Practical Periods: 30*

\hfill *Total Periods: 60*

** COURSE OUTCOMES
After the completion of this course, students will be able to: 
- Implement linear data structures and solve problems using them  (K3)
- Implement trees and graphs and use them to solve problems (K3)
- Implement various sorting and hashing algorithms (K2)
- Differentiate stack, queue, trees and graphs (K2)

      
** TEXT BOOKS
1. M. A. Weiss, ``Data Structures and Algorithm Analysis in C'',
   Second Edition , Pearson Education, 2006

** REFERENCES
1. V. Aho, J. E. Hopcroft, and J. D. Ullman, ``Data Structures and
   Algorithms'', Pearson Education, First Edition Reprint 2003.
2. R. F. Gilberg, B. A. Forouzan, ``Data Structures'', Second Edition,
   Thomson India Edition, 2005.
3. Ellis Horowitz, Sartaj Sahni, Susan Anderson-Freed, ``Fundamentals
   of Data Structures in C'', Second Edition, University Press, 2008
4. S. Sridhar, ``Design and Analysis of Algorithms'', First Edition,
   Oxford University Press. 2014
5. Byron Gottfried, Jitender Chhabra, ``Programming with C'' (Schaum's
   Outlines Series), Mcgraw Hill Higher Ed., III Edition, 2010
