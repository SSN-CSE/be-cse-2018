* <<<406>>> SOFTWARE ENGINEERING
:properties:
:author: Ms. K. Madheswari and Ms. S. Angel Deborah
:date: 
:end:
#+start_comment
1. Almost the same as AU; Units have been reordered
2. For changes, see the individual units
3. Not applicable
4. Five course outcomes are specified and they align to each unit. Course objectives are also specified
5. Not applicable
#+end_comment

#+startup: showall

{{{credits}}}
| L | T | P | C |
| 3 | 0 | 0 | 3 |

** COURSE OBJECTIVES
- To understand the phases in a software project
- To understand fundamental concepts of requirements engineering and Analysis Modeling.
- To understand the various software design methodologies
- To learn various testing and maintenance measures.

{{{unit}}}
|UNIT I | SOFTWARE PROCESS MODELS | 9 |
Introduction to Software Engineering; Principles and Practices; Software Process: Generic process model -- Perspective and Specialized
Process Models; Introduction to Agility: Agile process.

#+start_comment
1. Removed: Extreme programming, XP Process
2. Added: Principles and practices, Generic process model
#+end_comment

{{{unit}}}
|UNIT II | PROJECT PLANNING AND MANAGEMENT | 9 |
Project Planning Process; Software Project Estimation: Decomposition Techniques -- Empirical Estimation Models -- The Make/Buy
Decision -- Project Scheduling; Risk Management: Risk identification -- Risk Projection -- Risk Mitigation.

#+start_comment
1. Removed: CASE TOOLS, RMMM Plan
2. This unit was fifth unit in AU R2017
#+end_comment

{{{unit}}}
|UNIT III | REQUIREMENTS ANALYSIS AND SPECIFICATION  | 9 |
Software Requirements: Functional and non-functional -- User requirements -- System requirements -- Software requirements document; Requirement Engineering Process: Feasibility studies -- Requirements elicitation and analysis -- requirements validation -- requirements
management; Classical Analysis: Structured system analysis; Petri Nets.

#+start_comment
1. Removed: Data dictionary
2. This unit was second unit in AU R2017
#+end_comment

{{{unit}}}
|UNIT IV | SOFTWARE DESIGN | 9 |
Design Concepts: Design process -- Design concepts -- Design model -- Modeling Principles; Architectural Design: Architectural styles --Architectural mapping using data flow; User Interface Design: The golden rules -- Interface analysis -- Interface design; Component Level Design: Designing class based components -- Traditional components.

#+start_comment
1. Removed: Design Heuristic
2. This unit was third unit in AU R2017
#+end_comment

{{{unit}}}
|UNIT V | TESTING AND MAINTENANCE | 9 |
Software Testing Fundamentals; Internal and External Views of Testing:  White Box Testing -- Basis path testing -- Control structure testing -- Black box testing -- Unit testing -- Integration testing -- Regression testing -- Validation testing -- System testing; Debugging; Software Implementation: Coding practices and principles; Maintenance: Types -- Reengineering -- Reverse Engineering -- Restructuring.

#+start_comment
1. Removed: Refactoring, BPR model, Forward Engineering
2. Added: Coding Principles
3. This unit was fourth unit in AU R2017
#+end_comment

\hfill *Total Periods: 45*

** COURSE OUTCOMES
After the completion of this course, students will be able to: 
- Understand principles of software engineering and choose an appropraite process model (K4)
- Manage project schedule, estimate project cost and effort required (K3).
- Perform requirements analysis and modeling (K3)
- Apply systematic procedure for software design (K3)
- Compare and contrast the various testing and maintenance activities (K2)

      
** TEXT BOOKS
1. Roger S Pressman, ``Software Engineering -- A Practitioner's Approach'', McGraw-Hill International Edition, Seven Edition, 2010.
2. Ian Sommerville, ``Software Engineering'', Pearson Education Asia, Nineth Edition, 2011.

** REFERENCES
1. Rajib Mall, ``Fundamentals of Software Engineering'', PHI Learning Private Limited, Third Edition, 2009.
2. Pankaj Jalote, ``Software Engineering, A Precise Approach'', Wiley India, 2010.
3. Kelkar S A,``Software Engineering'', Prentice Hall of India, 2007.
4. Stephen R Schach, ``Software Engineering'', Tata McGraw-Hill Publishing Company Limited,2007.
